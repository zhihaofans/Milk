name: Check for New Release (CheckRelease-Clash.Verge.rev-installer)

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 00:00 运行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  check_release:
    runs-on: ubuntu-latest
    steps:
      - name: 获取最新发布版本
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/clash-verge-rev/clash-verge-rev/releases/latest | jq -r '.tag_name')
          #latest_release="v${latest_release}"  # 在版本前加 "v"
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: 获取 `latest.json` 并提取文件哈希值
        id: get_hashes
        run: |
          json_url="https://github.com/clash-verge-rev/clash-verge-rev/releases/download/${latest_release}/latest.json"
          echo "正在获取: $json_url"

          # 使用 curl -L 处理 302 重定向
          json_content=$(curl -s -L $json_url)
          # 调试：打印完整 JSON
          echo "=== latest.json 内容 ==="
          echo "$json_content"

          # 确保 JSON 解析正确
          if [ -z "$json_content" ] || [ "$json_content" == "null" ]; then
            echo "Error: latest.json 下载失败或内容为空"
            exit 1
          fi

          # 提取签名值
          hash_x86_64=$(echo "$json_content" | jq -r '.platforms["windows-x86_64"].signature // empty')
          hash_aarch64=$(echo "$json_content" | jq -r '.platforms["windows-aarch64"].signature // empty')
          hash_i686=$(echo "$json_content" | jq -r '.platforms["windows-i686"].signature // empty')
          json_version=$(echo "$json_content" | jq -r '.version // empty')

          # 确保 hash 不为空
          if [ -z "$hash_x86_64" ] || [ -z "$hash_aarch64" ] || [ -z "$hash_i686" ]; then
            echo "Error: 无法解析哈希值"
            exit 1
          fi
          echo "json_version=$json_version" >> $GITHUB_ENV
          
          echo "hash_x86_64=$hash_x86_64" >> $GITHUB_ENV
          echo "hash_aarch64=$hash_aarch64" >> $GITHUB_ENV
          echo "hash_i686=$hash_i686" >> $GITHUB_ENV

      - name: 显示提取的哈希值
        run: |
          echo "版本: $json_version"
          
          echo "Windows x86_64 签名: $hash_x86_64"
          echo "Windows aarch64 签名: $hash_aarch64"
          echo "Windows i686 签名: $hash_i686"
        env:
          hash_x86_64: ${{ env.hash_x86_64 }}
          hash_aarch64: ${{ env.hash_aarch64 }}
          hash_i686: ${{ env.hash_i686 }}
          json_version: ${{ env.json_version }}
