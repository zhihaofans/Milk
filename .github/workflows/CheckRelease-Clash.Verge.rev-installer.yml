name: Check for New Release (CheckRelease-Clash.Verge.rev-installer)

on:
  schedule:
    - cron: '0 0 * * *'  # 每天运行一次
  workflow_dispatch:     # 手动触发

jobs:
  check_release:
    runs-on: ubuntu-latest
    steps:
      - name: 获取最新发布版本
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/clash-verge-rev/clash-verge-rev/releases/latest | jq -r '.tag_name')
          echo "latest_release=$latest_release" >> $GITHUB_ENV

      - name: 获取 Scoop 应用版本
        id: scoop_version
        run: |
          manifest_url="https://raw.githubusercontent.com/zhihaofans/Milk/main/bucket/Clash.Verge.rev-installer.json"
          scoop_version=$(curl -s $manifest_url | jq -r '.version')
          scoop_version="v${scoop_version}"  # 在版本前加 "v"
          echo "scoop_version=$scoop_version" >> $GITHUB_ENV

      - name: 比较版本
        id: check_new_release
        run: |
          echo "GitHub Release 版本: $latest_release"
          echo "Scoop 版本: $scoop_version"
          
          if [ "$(printf '%s\n' "$latest_release" "$scoop_version" | sort -V | head -n1)" != "$latest_release" ]; then
            echo "检测到新版本: $latest_release"
            echo "is_new=true" >> $GITHUB_ENV
          else
            echo "Scoop 应用已是最新版本: $scoop_version"
            echo "is_new=false" >> $GITHUB_ENV
          fi
            - name: 测试 GitHub Actions 是否能访问 latest.json
        run: |
          json_url="https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.1.2/latest.json"
          echo "尝试访问: $json_url"
          
          # 加 `-L` 选项，自动跟随 302 重定向
          response=$(curl -s -o latest.json -w "%{http_code}" -L "$json_url")

          if [ "$response" -ne 200 ]; then
            echo "❌ 无法访问 latest.json, HTTP 状态码: $response"
            exit 1
          fi

          echo "✅ GitHub Actions 可以访问 latest.json"
        - name: 获取 `latest.json` 并提取文件哈希值
        if: env.is_new == 'true'
        id: get_hashes
        run: |
          json_url="https://github.com/clash-verge-rev/clash-verge-rev/releases/download/${latest_release}/latest.json"
          echo "正在获取: $json_url"

          json_content=$(curl -s $json_url)
          echo "结果: $json_content"

          hash_x86_64=$(echo "$json_content" | jq -r '.platforms["windows-x86_64"].signature')
          hash_aarch64=$(echo "$json_content" | jq -r '.platforms["windows-aarch64"].signature')
          hash_i686=$(echo "$json_content" | jq -r '.platforms["windows-i686"].signature')

          echo "hash_x86_64=$hash_x86_64" >> $GITHUB_ENV
          echo "hash_aarch64=$hash_aarch64" >> $GITHUB_ENV
          echo "hash_i686=$hash_i686" >> $GITHUB_ENV

      - name: 显示提取的哈希值
        if: env.is_new == 'true'
        run: |
          echo "Windows x86_64 签名: $hash_x86_64"
          echo "Windows aarch64 签名: $hash_aarch64"
          echo "Windows i686 签名: $hash_i686"
        env:
          hash_x86_64: ${{ env.hash_x86_64 }}
          hash_aarch64: ${{ env.hash_aarch64 }}
          hash_i686: ${{ env.hash_i686 }}

      

      - name: 执行操作
        if: env.is_new == 'true'
        run: |
          echo "检测到新发布，执行相应操作..."
          # 这里可以添加通知或自动更新 Scoop 清单的代码
